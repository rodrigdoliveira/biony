$scope.biosignals = [];
$scope.biosignal = null;

respColor = "<%= current_user.respColor %>"
respZerosColor = "<%= current_user.respZerosColor %>"

edaColor = "<%= current_user.edaColor %>"
edaOnsetColor = "<%= current_user.edaOnsetColor %>"
edaPeaksColor = "<%= current_user.edaPeaksColor %>"

emgColor = "<%= current_user.emgColor %>"
emgOnsetColor = "<%= current_user.emgOnsetColor %>"

bvpColor = "<%= current_user.bvpColor %>"
bvpOnsetColor = "<%= current_user.bvpOnsetColor %>"

eegColor = "<%= current_user.eegColor %>"

ecgColor = "<%= current_user.ecgColor %>"
ecgRPeaksColor = "<%= current_user.ecgRPeaksColor %>"

whiteColor = "#FFFFFF"

$scope.trashIconPNG = "<%=image_path('trash.png')%>"

getColor = { "eeg": eegColor, "resp": respColor, "eda": edaColor, "emg": emgColor, "ecg": ecgColor, "bvp": bvpColor, "none": whiteColor }

$scope.clickLegend = function(){
    splitLegend = this.id.split("-");

    circle = $("#circle-"+splitLegend[1]+"-"+splitLegend[2]);
    currentShow = circle.data("show")
    
    newShowStatus = currentShow ? "hidden" : "visible";

    circle.data("show", !currentShow)

    $("#circle-"+splitLegend[1]+"-"+splitLegend[2]).css({
        "visibility": newShowStatus
    });

    $(".line-"+splitLegend[1]+"-"+splitLegend[2]).toggle();
}



$scope.toggleAnnotations = function(idx) {

    signalData = $scope.signalsData[idx];

    if(signalData["annotations"] && signalData["annotations"].length > 0){

        svg = d3.select("#svg"+idx)

        for(k=0; k < signalData["annotations"].length; k++){
            annotation = signalData["annotations"][k];

            $("#annotationRect-"+signalData["idx"]+"-"+k).toggle();

            $(".line-"+signalData["idx"]+"-aMin"+k).toggle();

            $(".line-"+signalData["idx"]+"-aMax"+k).toggle();

        }
        
    }
}

$scope.toggleMetaData = function(idx){
    $("#signalMetaData" + idx).toggle()
}

$scope.signalsData = []

$scope.preChangeXAxisIDX = -1;
$scope.preCreateAnnotationIDX = -1;
$scope.changeXaxis = false;


$scope.createAnnotationBox = false;
$scope.preCreateAnnotation = function(idx){
    $scope.preCreateAnnotationIDX = idx;

    $scope.createAnnotationBox = true;
}

$scope.annotationToDelete = null;
$scope.annotationFromBiosignalToDelete = null;
$scope.annotationFromBiosignalIDXToDelete = null;
$scope.preDeleteAnnotation = function(annotation){
    $scope.annotationToDelete = annotation;
    $scope.deleteAnnotationBox = true;
}

$scope.deleteAnnotationBox = false;
$scope.deleteAnnotation = function(){

    $.ajax({
        type: "DELETE",
        url: "/biosignals/"+ $scope.annotationFromBiosignalToDelete._id.$oid + "/annotations/" + $scope.annotationToDelete._id.$oid,
        success: function(data){

            if(data["result"]){
                $scope.updateBiosignal();
            }

            
        },
        error: function(textStatus, errorThrown){
            console.log("Status: " + JSON.stringify(textStatus)); 
            console.log("Error: " + errorThrown);
        }
    });        
}

$scope.annotationsToShow = []
$scope.listAnnotationsDiv = false;

$scope.closeListAnnotationsDiv = function(){
    $scope.listAnnotationsDiv = false;
    $scope.annotationFromBiosignalToDelete = null;
    $scope.annotationFromBiosignalIDXToDelete = null;
    $scope.annotationsToShow = []
}

$scope.listAnnotations = function(idx){
    console.log(idx);
    console.log($scope.signalsData[idx]["annotations"])
    $scope.annotationsToShow = JSON.parse(JSON.stringify($scope.signalsData[idx]["annotations"]));
    $scope.annotationFromBiosignalToDelete = $scope.biosignal;
    $scope.annotationFromBiosignalIDXToDelete = idx;

    $scope.annotationsToShow.sort(function(a,b){
        return a.minX - b.minX
    })
    $scope.listAnnotationsDiv = true;
}

$scope.createAnnotation = function(){
    
    minX = $("#minXAnnotation").val();
    maxX = $("#maxXAnnotation").val();
    descriptionAnnotation = $("#descriptionAnnotation").val();
    colorAnnotation = $("#colorAnnotation").val();

    if(minX == "" || minX == null || maxX == "" || maxX == null || (parseInt(minX) > parseInt(maxX))){
        alert("You need to insert a valid time interval");
        return;
    }

    if(descriptionAnnotation == "" || descriptionAnnotation == null){
        alert("You need to insert a valid description");
        return;
    }
    
    idx = $scope.preCreateAnnotationIDX;
    biosignal = $scope.biosignal

    annotationToCreate = {"minX": minX, "maxX": maxX, "description": descriptionAnnotation, "color": colorAnnotation}

    $.ajax({
        type: "POST",
        url: "/biosignals/"+ biosignal._id.$oid +"/createAnnotation",
        data: { annotation: annotationToCreate, innerIdx: idx},
        success: function(data){
            console.log("oi")

            if(data["result"]){
                $scope.updateBiosignal();
            } else {
                alert("SERVER ERROR");
            }
            
        },
        error: function(textStatus, errorThrown){
            console.log("Status: " + JSON.stringify(textStatus)); 
            console.log("Error: " + errorThrown);
            $scope.createAnnotationBox = false;
            $scope.$apply();
        }
    });

    $("#minXAnnotation").val("");
    $("#maxXAnnotation").val("");
    $("#descriptionAnnotation").val("");
    

}

$scope.preChangeXAxis = function(idx){
    $scope.preChangeXAxisIDX = idx;

    $scope.changeXaxis = true;
}

$scope.preChangeYAxis = function(idx){
    $scope.preChangeYAxisIDX = idx;

    $scope.changeYaxis = true;
}

$scope.applyChangesToAxis = function(svg, x, y, idx){
    
    signalData = $scope.signalsData[idx];

    svg.select("g.xaxis").call(d3.axisBottom(x));
    svg.select("g.yaxis").call(d3.axisLeft(y).ticks(5));

    svg.select("path.nullLineY")
        .attr("d", d3.line()
            .x(function(d,i) { return x(d) })
            .y(function(d,i) { return y(0) }))

    svg.select("#path-"+idx)
        .attr("d", d3.line()
            .x(function(d,i) { return x(d) })
            .y(function(d,i) { return y(signalData["processedData"]["y"][i]) }))

    for(k=0; k < signalData["processedData"]["extraLines"].length ; k++){
        extraLine = signalData["processedData"]["extraLines"][k];
        ts = signalData["processedData"]["x"];

        svg.selectAll(".line-"+signalData["idx"]+"-"+k)
            .attr('x1', function(d,i) { return x(ts[extraLine["content"][i]]) } )
            .attr('x2', function(d,i) { return x(ts[extraLine["content"][i]]) } )
    }

    if(signalData["annotations"] && signalData["annotations"].length > 0){
        for(k=0; k < signalData["annotations"].length; k++){
            annotation = signalData["annotations"][k];

            svg.selectAll(".line-"+signalData["idx"]+"-aMin"+k)
                .attr('x1', x(annotation.minX) )
                .attr('x2', x(annotation.minX) )

            svg.selectAll(".line-"+signalData["idx"]+"-aMax"+k)
                .attr('x1', x(annotation.maxX) )
                .attr('x2', x(annotation.maxX) )

            svg.select("#annotationRect-"+signalData["idx"]+"-"+k)
                .attr("x", x(annotation.minX))
                .attr("width", x(annotation.maxX) - x(annotation.minX))
        }
        
    }
}

$scope.resetGraph = function(idx){
    
    if(idx == -1){
        $("body").css("cursor","wait");

        for(i = 0; i < $scope.signalsData.length; i++){
            signalData = $scope.signalsData[i]

            x = xAxisObjs[i];
            y = yAxisObjs[i];
            x.domain([d3.min(signalData["processedData"]["x"]), d3.max(signalData["processedData"]["x"])]);
            y.domain([d3.min(signalData["processedData"]["y"]), d3.max(signalData["processedData"]["y"])]);

            svg = d3.select("#svg"+i)

            svgZoomObjs[i].call(zoomObjs[i].transform, d3.zoomIdentity.scale(1))

            $scope.applyChangesToAxis(svg, x, y, i);

        }
        
        $("body").css("cursor","default");
    } else {
        signalData = $scope.signalsData[idx]

        x = xAxisObjs[idx];
        y = yAxisObjs[idx];
        x.domain([d3.min(signalData["processedData"]["x"]), d3.max(signalData["processedData"]["x"])]);
        y.domain([d3.min(signalData["processedData"]["y"]), d3.max(signalData["processedData"]["y"])]);

        svg = d3.select("#svg"+idx)

        svgZoomObjs[idx].call(zoomObjs[idx].transform, d3.zoomIdentity.scale(1))


        $scope.applyChangesToAxis(svg, x, y, idx);
    }

    

}

$scope.xAxisUpdate = function(){
    maxX = $("#maxXAxis").val();
    if(maxX == "" || maxX == null || maxX <= 0){
        alert("You need to insert a maximum value (number > 0) for X Axis");
        return;
    }

    
    $("#maxXAxis").val("");
    idx = $scope.preChangeXAxisIDX;

    if(idx == -1){
        
        for(i = 0; i < $scope.signalsData.length; i++){
            signalData = $scope.signalsData[i]

            x = xAxisObjs[i];
            y = yAxisObjs[i];
            x.domain([0, maxX])

            svg = d3.select("#svg"+i)

            $scope.applyChangesToAxis(svg, x, y, i);
        }

    } else {
        signalData = $scope.signalsData[idx]

        x = xAxisObjs[idx];
        y = yAxisObjs[idx];
        x.domain([0, maxX])

        svg = d3.select("#svg"+idx)

        $scope.applyChangesToAxis(svg, x, y, idx);
    }

    

    $scope.changeXaxis = false;
}

$scope.yAxisUpdate = function(){
    minY = $("#minYAxis").val();
    maxY = $("#maxYAxis").val();
    if(maxY == "" || maxY == null || minY == "" || minY == null){
        alert("You need to insert a domain for the Y Axis");
        return;
    }

    
    $("#maxYAxis").val("");
    $("#maxYAxis").val("");
    idx = $scope.preChangeYAxisIDX;

    if(idx == -1){
        for(i = 0; i < $scope.signalsData.length; i++){
            signalData = $scope.signalsData[i]

            x = xAxisObjs[i];
            y = yAxisObjs[i];
            y.domain([minY, maxY])

            svg = d3.select("#svg"+i)

            $scope.applyChangesToAxis(svg, x, y, i);
        }

    } else {
        signalData = $scope.signalsData[idx]

        x = xAxisObjs[idx];
        y = yAxisObjs[idx];
        y.domain([minY, maxY])

        svg = d3.select("#svg"+idx)

        $scope.applyChangesToAxis(svg, x, y, idx);
    }

    

    $scope.changeYaxis = false;
}


xAxisObjs = []
yAxisObjs = []
zoomObjs = []



$scope.newExtraLineObj = function(name, color, content, lineIdx){
    return {"name":name, "color": color, "content": content, "lineIdx": lineIdx }
}

$scope.updateBiosignal = function(){
    window.location.reload();
}

$scope.initSignal = function(signalId){
    //$scope.loading = true;
    $.ajax({
        type: "GET",
        url: "/biosignals/" + signalId + "/d3/",
        success: function(data){
            $scope.biosignal = data;

            processedData = JSON.parse($scope.biosignal.processedData)

            var j=0;

            signalData = {}
            signalData["type"] = "none"
            signalData["processedData"] = {}
            signalData["processedData"]["x"] = JSON.parse(processedData.ts)
            signalData["processedData"]["extraLines"] = []
            signalData["idx"] = j;
            signalData["annotations"] = $scope.biosignal.annotations.filter(function (el) { return el.innerIdx == j; });
            signalData["annotationTooltip"] = []
            if(signalData["annotations"]){
                for(a = 0; a < signalData["annotations"].length; a++){
                    signalData["annotationTooltip"].push(false);
                }
            }
            
            $scope.rawSignal = []
            rawSignalArray = $scope.biosignal.rawSignal.split("\n");
            for(i=0; i < rawSignalArray.length ; i++){
                if(rawSignalArray[i] != "" && rawSignalArray[i][0] != "#"){
                    $scope.rawSignal.push(parseFloat(rawSignalArray[i]));
                }
            }
            signalData["processedData"]["y"] = $scope.rawSignal
            $scope.signalsData.push(signalData);
            $scope.initD3(signalData, false, "#rawSignal");
            j += 1;

            signalData = {}
            signalData["type"] = "ecg"
            signalData["processedData"] = {}
            signalData["processedData"]["x"] = JSON.parse(processedData.ts)
            signalData["processedData"]["extraLines"] = []
            signalData["processedData"]["extraLines"].push($scope.newExtraLineObj("R-PEAKS", ecgRPeaksColor, JSON.parse(processedData.rpeaks), "0"));
            signalData["idx"] = j;
            signalData["annotations"] = $scope.biosignal.annotations.filter(function (el) { return el.innerIdx == j; });
            signalData["annotationTooltip"] = []
            if(signalData["annotations"]){
                for(a = 0; a < signalData["annotations"].length; a++){
                    signalData["annotationTooltip"].push(false);
                }
            }
            
            $scope.signalsData.push(signalData);
            signalData["processedData"]["y"] = JSON.parse(processedData.filtered)
            $scope.initD3(signalData, false, "#filteredSignal");
            j +=1 

            signalData = {}
            signalData["type"] = "none"
            signalData["processedData"] = {}
            signalData["processedData"]["x"] = JSON.parse(processedData.heart_rate_ts)
            signalData["processedData"]["extraLines"] = []
            signalData["idx"] = j;
            signalData["annotations"] = $scope.biosignal.annotations.filter(function (el) { return el.innerIdx == j; });
            signalData["annotationTooltip"] = []
            if(signalData["annotations"]){
                for(a = 0; a < signalData["annotations"].length; a++){
                    signalData["annotationTooltip"].push(false);
                }
            }
            
            $scope.signalsData.push(signalData);
            signalData["processedData"]["y"] = JSON.parse(processedData.heart_rate)
            $scope.initD3(signalData, false, "#heartRate");
            j +=1

            signalData = {}
            signalData["type"] = "none"
            signalData["processedData"] = {}
            signalData["processedData"]["x"] = JSON.parse(processedData.templates_ts)
            signalData["processedData"]["extraLines"] = []
            signalData["idx"] = j;
            signalData["annotations"] = $scope.biosignal.annotations.filter(function (el) { return el.innerIdx == j; });
            signalData["annotationTooltip"] = []
            if(signalData["annotations"]){
                for(a = 0; a < signalData["annotations"].length; a++){
                    signalData["annotationTooltip"].push(false);
                }
            }
            
            $scope.signalsData.push(signalData);
            signalData["processedData"]["y"] = JSON.parse(processedData.templates)[0]
            $scope.initD3(signalData, false, "#templates");
            j +=1

            $scope.$apply();
        },
        error: function(textStatus, errorThrown){
            console.log("Status: " + JSON.stringify(textStatus)); 
            console.log("Error: " + errorThrown);
            $scope.$apply();
        }
    });
}

potentialAnnotationsHover = null;

$scope.annotationTooltipsToShow = []

$scope.initD3 = function(signalData, update, divId){
    var margin = {top: 20, right: 10, bottom: 50, left: 70},
        width = vwTOpx(80) - margin.left - margin.right,
        height = vwTOpx(13) - margin.top - margin.bottom;

    //console.log(d3.select("#filteredSignal"+index.toString()))
    console.log(signalData);
    console.log(divId);
    console.log(d3.select(divId))
    idxString = signalData["idx"].toString();
    var svg = d3.select(divId)
    .append("svg")
        .attr("id", "svg" + idxString)
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
    .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")")
        .attr("cursor","grab")
        .on("mouseenter", function(){
            potentialAnnotationsHover = signalData["annotations"]
        })
        .on("mouseleave", function(){
            potentialAnnotationsHover = null

            for(a = 0; a < signalData["annotationTooltip"].length; a++){
                signalData["annotationTooltip"][a] = false;
            }
            $scope.annotationTooltipsToShow = [];
            $scope.$apply();

        })
        .on("mousemove", function(){
            xMouse = d3.event.x
            yMouse = d3.event.y
            actualIdx = signalData["idx"];

            //console.log("MOUSE -> " + xMouse);

            if(potentialAnnotationsHover){
                for(annotationIdx = 0; annotationIdx < potentialAnnotationsHover.length; annotationIdx++){
                    annotation = potentialAnnotationsHover[annotationIdx];
                    
                    var annotationPos = document.getElementById("annotationRect-"+actualIdx+"-"+annotationIdx).getBoundingClientRect();
                    //console.log(annotationPos)

                    if(xMouse >= annotationPos.left && xMouse <= annotationPos.right){
                        if(!signalData["annotationTooltip"][annotationIdx]){
                            signalData["annotationTooltip"][annotationIdx] = true;

                            $scope.annotationTooltipsToShow.push(annotation);

                            $scope.$apply();
                        }
                    } else {
                        if(signalData["annotationTooltip"][annotationIdx]){

                            idxToRemove = null;
                            for(a = 0; a < $scope.annotationTooltipsToShow.length; a++){
                                if($scope.annotationTooltipsToShow[a]["_id"]["$oid"] == annotation["_id"]["$oid"]){
                                    idxToRemove = a;
                                    break;
                                }
                            }

                            
                            $scope.annotationTooltipsToShow.splice(idxToRemove, 1);
                            signalData["annotationTooltip"][annotationIdx] = false;
                            $scope.$apply();
                            
                            
                        }
                    } 
                }

                if($scope.annotationTooltipsToShow.length > 0){
                    $('#tooltipDiv').css({
                        display: "block",
                        left: d3.event.x + 20,
                        top: d3.event.y + 25
                    });
                }
            }

        })

    var x = d3.scaleLinear().domain([d3.min(signalData["processedData"]["x"]), d3.max(signalData["processedData"]["x"])]).range([0, width])
    if(!update){
        xAxisObjs.push(x);
    } else {
        xAxisObjs[signalData["idx"]] = x;
    }
    var y = d3.scaleLinear().domain([d3.min(signalData["processedData"]["y"]), d3.max(signalData["processedData"]["y"])]).range([height, 0])
    if(!update){
        yAxisObjs.push(y);
    } else {
        yAxisObjs[signalData["idx"]] = y;
    }

    ymin = d3.min(signalData["processedData"]["y"])
    ymax = d3.max(signalData["processedData"]["y"])
    alpha = 0.1 * (ymax - ymin)
    ymax += alpha
    ymin -= alpha

    legendSpace = 60
    signalData["processedData"]["extraLines"].forEach(function(d, i){
        svg.append("circle")
            .attr("id", "circle-"+idxString+"-"+i.toString())
            .attr("cx", i*legendSpace)  // space legend
            .attr("cy", height + margin.top + 20 - 2.5)
            .attr("r", 5)
            .attr("data-show", true)
            .style("cursor", "pointer")
            .style("fill", d["color"]) // Add the colours dynamically
            .append("svg:title").text("Toggle")
            .on("click", $scope.clickLegend);

        svg.append("text")
            .attr("id", "text-"+idxString+"-"+i.toString())
            .attr("x", i*legendSpace + 6)  // space legend
            .attr("y", height + margin.top + 20)
            .style("fill", function() { 
                return "white" })
            .style("font-size", "10px")
            .style("cursor", "pointer")
            .text(d["name"])
            .on("click", $scope.clickLegend)
            .append("svg:title").text("Toggle feature")
    });


    svg.append("defs").append("SVG:clipPath")
        .attr("id", "clip")
        .append("SVG:rect")
        .attr("width", width)
        .attr("height", height)
        .attr("x", 0)
        .attr("y", 0);

    path = svg.append("path")
        .datum(signalData["processedData"]["x"])
        .attr("clip-path", "url(#clip)")
        .attr("id", "path-"+idxString)
        .attr("fill", "none")
        .attr("stroke", getColor[signalData["type"]])
        .attr("stroke-width", 1)
        .attr("d", d3.line()
            .x(function(d,i) { return x(d) })
            .y(function(d,i) { return y(signalData["processedData"]["y"][i]) }))

    svg.append("path")
        .datum(signalData["processedData"]["x"])
        .attr("clip-path", "url(#clip)")        
        .attr("class", "nullLineY")
        .attr("stroke", "grey")
        .style("stroke-dasharray", ("3, 3"))  // <== This line here!!
        .attr("d", d3.line()
            .x(function(d,i) { return x(d) })
            .y(function(d,i) { return y(0) }));

    for(i=0; i < signalData["processedData"]["extraLines"].length; i++){
        extraLine = signalData["processedData"]["extraLines"][i]
        for(k=0; k < extraLine["content"].length; k++){
            content = extraLine["content"][k];
            xExtraLine = signalData["processedData"]["x"][content];
            drawVerticalLine(svg, x(xExtraLine), y(ymin), y(ymax), extraLine["color"], idxString, extraLine["lineIdx"]);
        }
    }

    invisRect = svg.append("rect")
        .attr("idx", idxString)
        .attr("width", width)
        .attr("height", height)
        .style("fill", "none")
        .style("pointer-events", "all")

    if(signalData["annotations"] && signalData["annotations"].length > 0){
        

        signalData["annotations"].sort(function(a,b){
            widthA = x(a.maxX) - x(a.minX)
            widthB = x(b.maxX) - x(b.minX)

            return widthB - widthA
        })

        for(k=0; k < signalData["annotations"].length; k++){
            annotation = signalData["annotations"][k];

            drawVerticalLine(svg, x(annotation.minX), y(ymin), y(ymax), annotation.color, idxString, "aMin"+k.toString());
            drawVerticalLine(svg, x(annotation.maxX), y(ymin), y(ymax), annotation.color, idxString, "aMax"+k.toString());

            svg.append("rect")
                .attr("data-show", true)
                .style("pointer-events", "all")
                .attr("id", "annotationRect-" + idxString + "-" + k.toString())
                .attr("minX", annotation.minX)
                .attr("maxX", annotation.maxX)
                .attr("description", annotation.description)
                .attr("clip-path", "url(#clip)") 
                .attr("x", x(annotation.minX))
                .attr("y", 0)
                .attr("height", height)
                .attr("width", x(annotation.maxX) - x(annotation.minX))
                .style("fill", annotation.color)
                .attr("fill-opacity","0.1")
                .on("mousemove", function(){
                        /*var text;

                        a = d3.select(this);
                        text = a.attr("description") + "<br>" + "From " + a.attr("minX") + "s to " + a.attr("maxX") + "s"

                        $('.tooltipChart').html(text);
                        $('.tooltipChart').css({
                            display: "block",
                            left: d3.event.x,
                            top: d3.event.y
                        });*/
                    })
                .on("mouseleave", function(){
                    /*$('.tooltipChart').css({
                        display: "none"
                        });*/
                });
        }
        
    }

    svg.append("g")
        .attr("class", "yaxis axisWhite")
        .call(d3.axisLeft(y).ticks(5));

    svg.append("g")
        .attr("class", "xaxis axisWhite")
        .attr("transform", "translate(0," + height + ")")
        .call(d3.axisBottom(x));

    // text label for the x axis
    svg.append("text")        
        .attr("transform",
        "translate(" + (width/2) + " ," + 
        (height + margin.top + 20) + ")")
        .style("text-anchor", "middle")
        .style("fill", "white")
        .text("Time (seconds)");

    // text label for the y axis
    svg.append("text")        
        .attr("transform","translate("+(-margin.left + 20) + "," + (height/2) + ")rotate(-90)")
        .style("text-anchor", "middle")
        .style("fill", "white")
        .text("Amplitude");

    var zoom = d3.zoom()
        .scaleExtent([1, 10])  // This control how much you can unzoom (x0.5) and zoom (x20)
        .translateExtent([[0,-height],[2*width,2*height]])
        .extent([[0, 0], [width, height]])
        .on("zoom", function(){ $scope.updateChart(this) });
    
    if(!update){
        zoomObjs.push(zoom);
    } else {
        zoomObjs[signalData["idx"]] = zoom;
    }

    // This add an invisible rect on top of the chart area. This rect can recover pointer events: necessary to understand when the user zoom

    

    svgZoomObjs.push(invisRect
        .call(zoom));
}

svgZoomObjs = []

$scope.updateChart = function(rect) {        
    index = rect.getAttribute("idx")
    
    oldX = xAxisObjs[index];
    oldY = yAxisObjs[index];
    
    svg = d3.select("#svg"+index)
    
    var newX = d3.event.transform.rescaleX(oldX);
    var newY = d3.event.transform.rescaleY(oldY);

    $scope.applyChangesToAxis(svg, newX, newY, index);
    }

$scope.unfavorite = function(biosignal, index){
    $.ajax({
        type: "POST",
        url: "/biosignals/"+ biosignal.$oid +"/addToFavorites",
        success: function(data){
            if(data["result"]){
                delete biosignal;
                $scope.biosignals.splice(index, 1);
                $scope.$apply();
            }
        },
        error: function(textStatus, errorThrown){
            biosignalObj.isFav = backupState
            console.log("Status: " + JSON.stringify(textStatus)); 
            console.log("Error: " + errorThrown);
        }
    });
}

function drawVerticalLine(svg, x, ymin, ymax, color, idxString, featureIdx){
    svg.append('line')
        .attr("clip-path", "url(#clip)")
        .attr("class", "line-" + idxString + "-" + featureIdx)
        .attr('x1', x)
        .attr('y1', ymin)
        .attr('x2', x)
        .attr('y2', ymax)
        .style("stroke-width", 1)
        .style("stroke", color)
        .style("fill", "none");
}

function vwTOpx(value) {
    var w = window,
        d = document,
        e = d.documentElement,
        g = d.getElementsByTagName('body')[0],
        x = w.innerWidth || e.clientWidth || g.clientWidth,
        y = w.innerHeight|| e.clientHeight|| g.clientHeight;

    var result = (x*value)/100.0;
    return result;
}

$scope.goToSignal = function(signal){
    $scope.loading = true;
    window.location.href="/biosignals/"+signal.$oid;
    $window.location.reload(true);
    //$scope.loading = false;
    $scope.$apply();
    }